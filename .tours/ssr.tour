{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "SSR",
  "steps": [
    {
      "file": "package.json",
      "description": "## Punto de entrada\nPara ejecutar la aplicación, lanzamos\n>> yarn dev\n\no \n\n>> npm run dev",
      "line": 11
    },
    {
      "file": "webpack.config.js",
      "description": "## Configuración Webpack (browser)\nEsta es la configuración para el navegador.\n\nEspecial hincapié en esta variable `__isBrowser__` seteada en `true` y en la configuración del servidor en `false`.",
      "line": 33,
      "selection": {
        "start": {
          "line": 11,
          "character": 36
        },
        "end": {
          "line": 11,
          "character": 40
        }
      }
    },
    {
      "file": "webpack.config.js",
      "description": "## Configuración Webpack (server)\nCon estas dos directivas, le decimos al bundle del server que no incluya node_modules (`fs`, `path`...)",
      "line": 49,
      "selection": {
        "start": {
          "line": 47,
          "character": 1
        },
        "end": {
          "line": 48,
          "character": 32
        }
      }
    },
    {
      "file": "src/server/index.js",
      "description": "## Servidor\nAplicación express, que sirve los estáticos del directorio dist.",
      "line": 9
    },
    {
      "file": "src/server/index.js",
      "description": "## Petición al servidor\nCualquier petición (siempre y cuando sea la carga inicial o entrada por barra de navegación) entrará por aquí.",
      "line": 14
    },
    {
      "file": "src/server/index.js",
      "description": "## Rutas en servidor\nPara hacer ciertas operaciones, debemos saber en qué ruta estamos, **react-router-dom** nos expone `matchPath` para esto.",
      "line": 15
    },
    {
      "file": "src/server/index.js",
      "description": "## Fetching en servidor\nSi ésta ruta es un componente que necesita datos, se hace la petición para mandar los datos pre-renderizados.",
      "line": 19,
      "selection": {
        "start": {
          "line": 17,
          "character": 1
        },
        "end": {
          "line": 19,
          "character": 25
        }
      }
    },
    {
      "file": "src/domain/routes.js",
      "description": "## Definición de las rutas de la app\nTenemos 2, una de ellas haciendo llamada a una api.",
      "line": 18
    },
    {
      "file": "src/server/index.js",
      "description": "## Renderizado en servidor\n**ReactDOM** nos expone el método `renderToString` para generar la parte visual/presentacional en el servidor.",
      "line": 22,
      "selection": {
        "start": {
          "line": 22,
          "character": 29
        },
        "end": {
          "line": 22,
          "character": 43
        }
      }
    },
    {
      "file": "src/server/index.js",
      "description": "## Manejando rutas en el servidor\nPara manejar rutas, tenemos un router estático de **react-router-dom**, que no dispone de estado, a diferencia del de navegador.\n\nRecibe dos parámetros, la localización que se está pidiendo, y el contexto (datos) que queramos pasar.",
      "line": 25,
      "selection": {
        "start": {
          "line": 23,
          "character": 7
        },
        "end": {
          "line": 25,
          "character": 23
        }
      }
    },
    {
      "file": "src/server/index.js",
      "description": "## Enviando el HTML\nUna vez renderizado, enviamos el HTML con: \n- Las referencias a los estáticos que hacen falta (js, css...) .\n- Los datos iniciales de la app para que concuerde en rerenders en el navegador.\n- El markup generado de nuestra app.\n",
      "line": 45,
      "selection": {
        "start": {
          "line": 29,
          "character": 7
        },
        "end": {
          "line": 44,
          "character": 14
        }
      }
    },
    {
      "file": "src/browser/index.js",
      "description": "## Hidratando al cliente\nLlamamos al método `hydrate` de **ReactDOM** que lo que hará es montar el markup sin realizar renders extras, e intentará montar los event listeners oportunos.",
      "line": 6
    },
    {
      "file": "src/browser/index.js",
      "description": "## Manejando rutas en el cliente\nUsamos `BrowserRouter` de **react-router-dom** que sí dispone de estado, a diferencia del `StaticRouter` del servidor.",
      "line": 10,
      "selection": {
        "start": {
          "line": 7,
          "character": 3
        },
        "end": {
          "line": 9,
          "character": 20
        }
      }
    },
    {
      "file": "src/components/App.jsx",
      "description": "## Seteando el router",
      "line": 20,
      "selection": {
        "start": {
          "line": 19,
          "character": 11
        },
        "end": {
          "line": 19,
          "character": 17
        }
      }
    },
    {
      "file": "src/components/App.jsx",
      "description": "## Ruta cuando no hay match\nRuta 404",
      "line": 23,
      "selection": {
        "start": {
          "line": 19,
          "character": 51
        },
        "end": {
          "line": 19,
          "character": 67
        }
      }
    },
    {
      "file": "src/components/Home.jsx",
      "description": "## Componente Home",
      "line": 4
    },
    {
      "file": "src/components/Navbar.jsx",
      "description": "## Links de la app\nLinks de nuestra app a las rutas definidas en `categories`.",
      "line": 29,
      "selection": {
        "start": {
          "line": 27,
          "character": 9
        },
        "end": {
          "line": 29,
          "character": 19
        }
      }
    },
    {
      "file": "src/components/CatGrid.jsx",
      "description": "## Componente CatGrid\nComprobamos si estamos en el navegador o no, y acorde a eso cogemos unos datos u otros.\n\n`staticContext` es el contexto que se recogerá desde el servidor y nos lo da `StaticRouter`.\n\n### Nota mental: Mostrar ejemplo de por qué es importante",
      "line": 7
    },
    {
      "file": "src/components/CatGrid.jsx",
      "description": "## useEffect (sólo cliente)\nCuando cambie el valor del array de dependencias (`tag`), comprobaremos si tenemos que hacer re-fetch o no basado en la referencia definida anteriormente.\n\nÚtil para usar `window` o `document`.",
      "line": 26
    },
    {
      "file": "src/services/api.js",
      "description": "## API\nUsamos cataas (Cats as-a-service)",
      "line": 18
    },
    {
      "file": "src/components/CatGrid.jsx",
      "description": "## Pintamos los michis",
      "line": 36,
      "selection": {
        "start": {
          "line": 9,
          "character": 3
        },
        "end": {
          "line": 10,
          "character": 38
        }
      }
    }
  ]
}